<?xml version="1.0" encoding="UTF-8"?>
<testsuite xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report-3.0.xsd" version="3.0" name="com.yourcompany.rentalmanagement.data.DataGeneratorTest" time="10.53" tests="1" errors="0" skipped="0" failures="0">
  <properties>
    <property name="java.specification.version" value="21"/>
    <property name="sun.cpu.isalist" value="amd64"/>
    <property name="sun.jnu.encoding" value="Cp1258"/>
    <property name="java.class.path" value="D:\RMIT\PROJECTS\FURTHER\Build a Backend\further-programming-assignment-2-build-a-backend-FTECH\rental-management-system\target\test-classes;D:\RMIT\PROJECTS\FURTHER\Build a Backend\further-programming-assignment-2-build-a-backend-FTECH\rental-management-system\target\classes;C:\Users\ADMIN\.m2\repository\org\openjfx\javafx-controls\21\javafx-controls-21.jar;C:\Users\ADMIN\.m2\repository\org\openjfx\javafx-controls\21\javafx-controls-21-win.jar;C:\Users\ADMIN\.m2\repository\org\openjfx\javafx-graphics\21\javafx-graphics-21.jar;C:\Users\ADMIN\.m2\repository\org\openjfx\javafx-graphics\21\javafx-graphics-21-win.jar;C:\Users\ADMIN\.m2\repository\org\openjfx\javafx-base\21\javafx-base-21.jar;C:\Users\ADMIN\.m2\repository\org\openjfx\javafx-base\21\javafx-base-21-win.jar;C:\Users\ADMIN\.m2\repository\org\openjfx\javafx-fxml\21\javafx-fxml-21.jar;C:\Users\ADMIN\.m2\repository\org\openjfx\javafx-fxml\21\javafx-fxml-21-win.jar;C:\Users\ADMIN\.m2\repository\org\junit\jupiter\junit-jupiter\5.10.1\junit-jupiter-5.10.1.jar;C:\Users\ADMIN\.m2\repository\org\junit\jupiter\junit-jupiter-api\5.10.1\junit-jupiter-api-5.10.1.jar;C:\Users\ADMIN\.m2\repository\org\opentest4j\opentest4j\1.3.0\opentest4j-1.3.0.jar;C:\Users\ADMIN\.m2\repository\org\junit\platform\junit-platform-commons\1.10.1\junit-platform-commons-1.10.1.jar;C:\Users\ADMIN\.m2\repository\org\apiguardian\apiguardian-api\1.1.2\apiguardian-api-1.1.2.jar;C:\Users\ADMIN\.m2\repository\org\junit\jupiter\junit-jupiter-params\5.10.1\junit-jupiter-params-5.10.1.jar;C:\Users\ADMIN\.m2\repository\org\junit\jupiter\junit-jupiter-engine\5.10.1\junit-jupiter-engine-5.10.1.jar;C:\Users\ADMIN\.m2\repository\org\junit\platform\junit-platform-engine\1.10.1\junit-platform-engine-1.10.1.jar;C:\Users\ADMIN\.m2\repository\org\hibernate\orm\hibernate-core\6.6.3.Final\hibernate-core-6.6.3.Final.jar;C:\Users\ADMIN\.m2\repository\jakarta\transaction\jakarta.transaction-api\2.0.1\jakarta.transaction-api-2.0.1.jar;C:\Users\ADMIN\.m2\repository\org\jboss\logging\jboss-logging\3.5.0.Final\jboss-logging-3.5.0.Final.jar;C:\Users\ADMIN\.m2\repository\org\hibernate\common\hibernate-commons-annotations\7.0.3.Final\hibernate-commons-annotations-7.0.3.Final.jar;C:\Users\ADMIN\.m2\repository\io\smallrye\jandex\3.2.0\jandex-3.2.0.jar;C:\Users\ADMIN\.m2\repository\com\fasterxml\classmate\1.5.1\classmate-1.5.1.jar;C:\Users\ADMIN\.m2\repository\net\bytebuddy\byte-buddy\1.14.18\byte-buddy-1.14.18.jar;C:\Users\ADMIN\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\4.0.0\jakarta.xml.bind-api-4.0.0.jar;C:\Users\ADMIN\.m2\repository\jakarta\activation\jakarta.activation-api\2.1.0\jakarta.activation-api-2.1.0.jar;C:\Users\ADMIN\.m2\repository\org\glassfish\jaxb\jaxb-runtime\4.0.2\jaxb-runtime-4.0.2.jar;C:\Users\ADMIN\.m2\repository\org\glassfish\jaxb\jaxb-core\4.0.2\jaxb-core-4.0.2.jar;C:\Users\ADMIN\.m2\repository\org\eclipse\angus\angus-activation\2.0.0\angus-activation-2.0.0.jar;C:\Users\ADMIN\.m2\repository\org\glassfish\jaxb\txw2\4.0.2\txw2-4.0.2.jar;C:\Users\ADMIN\.m2\repository\com\sun\istack\istack-commons-runtime\4.1.1\istack-commons-runtime-4.1.1.jar;C:\Users\ADMIN\.m2\repository\jakarta\inject\jakarta.inject-api\2.0.1\jakarta.inject-api-2.0.1.jar;C:\Users\ADMIN\.m2\repository\org\antlr\antlr4-runtime\4.13.0\antlr4-runtime-4.13.0.jar;C:\Users\ADMIN\.m2\repository\jakarta\persistence\jakarta.persistence-api\3.1.0\jakarta.persistence-api-3.1.0.jar;C:\Users\ADMIN\.m2\repository\org\postgresql\postgresql\42.7.4\postgresql-42.7.4.jar;C:\Users\ADMIN\.m2\repository\org\checkerframework\checker-qual\3.42.0\checker-qual-3.42.0.jar;C:\Users\ADMIN\.m2\repository\io\github\palexdev\materialfx\11.17.0\materialfx-11.17.0.jar;C:\Users\ADMIN\.m2\repository\io\github\palexdev\mfxcore\11.8.0\mfxcore-11.8.0.jar;C:\Users\ADMIN\.m2\repository\io\github\palexdev\mfxlocalization\11.1.0\mfxlocalization-11.1.0.jar;C:\Users\ADMIN\.m2\repository\io\github\palexdev\mfxresources\11.9.1\mfxresources-11.9.1.jar;C:\Users\ADMIN\.m2\repository\io\github\palexdev\mfxeffects\11.3.0\mfxeffects-11.3.0.jar;C:\Users\ADMIN\.m2\repository\io\github\palexdev\virtualizedfx\11.9.6\virtualizedfx-11.9.6.jar;C:\Users\ADMIN\.m2\repository\com\cloudinary\cloudinary-http5\2.0.0\cloudinary-http5-2.0.0.jar;C:\Users\ADMIN\.m2\repository\com\cloudinary\cloudinary-core\2.0.0\cloudinary-core-2.0.0.jar;C:\Users\ADMIN\.m2\repository\org\apache\commons\commons-lang3\3.1\commons-lang3-3.1.jar;C:\Users\ADMIN\.m2\repository\org\apache\httpcomponents\client5\httpclient5\5.3.1\httpclient5-5.3.1.jar;C:\Users\ADMIN\.m2\repository\org\apache\httpcomponents\core5\httpcore5-h2\5.2.4\httpcore5-h2-5.2.4.jar;C:\Users\ADMIN\.m2\repository\org\slf4j\slf4j-api\1.7.36\slf4j-api-1.7.36.jar;C:\Users\ADMIN\.m2\repository\org\apache\httpcomponents\core5\httpcore5\5.2.5\httpcore5-5.2.5.jar;C:\Users\ADMIN\.m2\repository\com\cloudinary\cloudinary-taglib\2.0.0\cloudinary-taglib-2.0.0.jar;C:\Users\ADMIN\.m2\repository\javax\servlet\jsp-api\2.0\jsp-api-2.0.jar;C:\Users\ADMIN\.m2\repository\javax\servlet\servlet-api\2.4\servlet-api-2.4.jar;C:\Users\ADMIN\.m2\repository\io\github\cdimascio\dotenv-java\2.2.4\dotenv-java-2.2.4.jar;C:\Users\ADMIN\.m2\repository\org\mindrot\jbcrypt\0.4\jbcrypt-0.4.jar;C:\Users\ADMIN\.m2\repository\io\jsonwebtoken\jjwt-api\0.11.5\jjwt-api-0.11.5.jar;C:\Users\ADMIN\.m2\repository\io\jsonwebtoken\jjwt-impl\0.11.5\jjwt-impl-0.11.5.jar;C:\Users\ADMIN\.m2\repository\io\jsonwebtoken\jjwt-jackson\0.11.5\jjwt-jackson-0.11.5.jar;C:\Users\ADMIN\.m2\repository\com\fasterxml\jackson\core\jackson-databind\2.12.6.1\jackson-databind-2.12.6.1.jar;C:\Users\ADMIN\.m2\repository\com\fasterxml\jackson\core\jackson-annotations\2.12.6\jackson-annotations-2.12.6.jar;C:\Users\ADMIN\.m2\repository\com\fasterxml\jackson\core\jackson-core\2.12.6\jackson-core-2.12.6.jar;C:\Users\ADMIN\.m2\repository\de\jensd\fontawesomefx-fontawesome\4.7.0-9.1.2\fontawesomefx-fontawesome-4.7.0-9.1.2.jar;C:\Users\ADMIN\.m2\repository\de\jensd\fontawesomefx-commons\9.1.2\fontawesomefx-commons-9.1.2.jar;C:\Users\ADMIN\.m2\repository\org\json\json\20230227\json-20230227.jar;C:\Users\ADMIN\.m2\repository\com\sun\mail\javax.mail\1.6.2\javax.mail-1.6.2.jar;C:\Users\ADMIN\.m2\repository\javax\activation\activation\1.1\activation-1.1.jar;"/>
    <property name="java.vm.vendor" value="Oracle Corporation"/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="user.variant" value=""/>
    <property name="java.vendor.url" value="https://java.oracle.com/"/>
    <property name="user.timezone" value="Asia/Saigon"/>
    <property name="os.name" value="Windows 11"/>
    <property name="java.vm.specification.version" value="21"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="user.country" value="US"/>
    <property name="sun.boot.library.path" value="C:\Program Files\Java\jdk-21\bin"/>
    <property name="sun.java.command" value="C:\Users\ADMIN\AppData\Local\Temp\surefire12732919086874730884\surefirebooter-20250108144838732_3.jar C:\Users\ADMIN\AppData\Local\Temp\surefire12732919086874730884 2025-01-08T14-48-38_597-jvmRun1 surefire-20250108144838732_1tmp surefire_0-20250108144838732_2tmp"/>
    <property name="jdk.debug" value="release"/>
    <property name="test" value="DataGeneratorTest"/>
    <property name="surefire.test.class.path" value="D:\RMIT\PROJECTS\FURTHER\Build a Backend\further-programming-assignment-2-build-a-backend-FTECH\rental-management-system\target\test-classes;D:\RMIT\PROJECTS\FURTHER\Build a Backend\further-programming-assignment-2-build-a-backend-FTECH\rental-management-system\target\classes;C:\Users\ADMIN\.m2\repository\org\openjfx\javafx-controls\21\javafx-controls-21.jar;C:\Users\ADMIN\.m2\repository\org\openjfx\javafx-controls\21\javafx-controls-21-win.jar;C:\Users\ADMIN\.m2\repository\org\openjfx\javafx-graphics\21\javafx-graphics-21.jar;C:\Users\ADMIN\.m2\repository\org\openjfx\javafx-graphics\21\javafx-graphics-21-win.jar;C:\Users\ADMIN\.m2\repository\org\openjfx\javafx-base\21\javafx-base-21.jar;C:\Users\ADMIN\.m2\repository\org\openjfx\javafx-base\21\javafx-base-21-win.jar;C:\Users\ADMIN\.m2\repository\org\openjfx\javafx-fxml\21\javafx-fxml-21.jar;C:\Users\ADMIN\.m2\repository\org\openjfx\javafx-fxml\21\javafx-fxml-21-win.jar;C:\Users\ADMIN\.m2\repository\org\junit\jupiter\junit-jupiter\5.10.1\junit-jupiter-5.10.1.jar;C:\Users\ADMIN\.m2\repository\org\junit\jupiter\junit-jupiter-api\5.10.1\junit-jupiter-api-5.10.1.jar;C:\Users\ADMIN\.m2\repository\org\opentest4j\opentest4j\1.3.0\opentest4j-1.3.0.jar;C:\Users\ADMIN\.m2\repository\org\junit\platform\junit-platform-commons\1.10.1\junit-platform-commons-1.10.1.jar;C:\Users\ADMIN\.m2\repository\org\apiguardian\apiguardian-api\1.1.2\apiguardian-api-1.1.2.jar;C:\Users\ADMIN\.m2\repository\org\junit\jupiter\junit-jupiter-params\5.10.1\junit-jupiter-params-5.10.1.jar;C:\Users\ADMIN\.m2\repository\org\junit\jupiter\junit-jupiter-engine\5.10.1\junit-jupiter-engine-5.10.1.jar;C:\Users\ADMIN\.m2\repository\org\junit\platform\junit-platform-engine\1.10.1\junit-platform-engine-1.10.1.jar;C:\Users\ADMIN\.m2\repository\org\hibernate\orm\hibernate-core\6.6.3.Final\hibernate-core-6.6.3.Final.jar;C:\Users\ADMIN\.m2\repository\jakarta\transaction\jakarta.transaction-api\2.0.1\jakarta.transaction-api-2.0.1.jar;C:\Users\ADMIN\.m2\repository\org\jboss\logging\jboss-logging\3.5.0.Final\jboss-logging-3.5.0.Final.jar;C:\Users\ADMIN\.m2\repository\org\hibernate\common\hibernate-commons-annotations\7.0.3.Final\hibernate-commons-annotations-7.0.3.Final.jar;C:\Users\ADMIN\.m2\repository\io\smallrye\jandex\3.2.0\jandex-3.2.0.jar;C:\Users\ADMIN\.m2\repository\com\fasterxml\classmate\1.5.1\classmate-1.5.1.jar;C:\Users\ADMIN\.m2\repository\net\bytebuddy\byte-buddy\1.14.18\byte-buddy-1.14.18.jar;C:\Users\ADMIN\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\4.0.0\jakarta.xml.bind-api-4.0.0.jar;C:\Users\ADMIN\.m2\repository\jakarta\activation\jakarta.activation-api\2.1.0\jakarta.activation-api-2.1.0.jar;C:\Users\ADMIN\.m2\repository\org\glassfish\jaxb\jaxb-runtime\4.0.2\jaxb-runtime-4.0.2.jar;C:\Users\ADMIN\.m2\repository\org\glassfish\jaxb\jaxb-core\4.0.2\jaxb-core-4.0.2.jar;C:\Users\ADMIN\.m2\repository\org\eclipse\angus\angus-activation\2.0.0\angus-activation-2.0.0.jar;C:\Users\ADMIN\.m2\repository\org\glassfish\jaxb\txw2\4.0.2\txw2-4.0.2.jar;C:\Users\ADMIN\.m2\repository\com\sun\istack\istack-commons-runtime\4.1.1\istack-commons-runtime-4.1.1.jar;C:\Users\ADMIN\.m2\repository\jakarta\inject\jakarta.inject-api\2.0.1\jakarta.inject-api-2.0.1.jar;C:\Users\ADMIN\.m2\repository\org\antlr\antlr4-runtime\4.13.0\antlr4-runtime-4.13.0.jar;C:\Users\ADMIN\.m2\repository\jakarta\persistence\jakarta.persistence-api\3.1.0\jakarta.persistence-api-3.1.0.jar;C:\Users\ADMIN\.m2\repository\org\postgresql\postgresql\42.7.4\postgresql-42.7.4.jar;C:\Users\ADMIN\.m2\repository\org\checkerframework\checker-qual\3.42.0\checker-qual-3.42.0.jar;C:\Users\ADMIN\.m2\repository\io\github\palexdev\materialfx\11.17.0\materialfx-11.17.0.jar;C:\Users\ADMIN\.m2\repository\io\github\palexdev\mfxcore\11.8.0\mfxcore-11.8.0.jar;C:\Users\ADMIN\.m2\repository\io\github\palexdev\mfxlocalization\11.1.0\mfxlocalization-11.1.0.jar;C:\Users\ADMIN\.m2\repository\io\github\palexdev\mfxresources\11.9.1\mfxresources-11.9.1.jar;C:\Users\ADMIN\.m2\repository\io\github\palexdev\mfxeffects\11.3.0\mfxeffects-11.3.0.jar;C:\Users\ADMIN\.m2\repository\io\github\palexdev\virtualizedfx\11.9.6\virtualizedfx-11.9.6.jar;C:\Users\ADMIN\.m2\repository\com\cloudinary\cloudinary-http5\2.0.0\cloudinary-http5-2.0.0.jar;C:\Users\ADMIN\.m2\repository\com\cloudinary\cloudinary-core\2.0.0\cloudinary-core-2.0.0.jar;C:\Users\ADMIN\.m2\repository\org\apache\commons\commons-lang3\3.1\commons-lang3-3.1.jar;C:\Users\ADMIN\.m2\repository\org\apache\httpcomponents\client5\httpclient5\5.3.1\httpclient5-5.3.1.jar;C:\Users\ADMIN\.m2\repository\org\apache\httpcomponents\core5\httpcore5-h2\5.2.4\httpcore5-h2-5.2.4.jar;C:\Users\ADMIN\.m2\repository\org\slf4j\slf4j-api\1.7.36\slf4j-api-1.7.36.jar;C:\Users\ADMIN\.m2\repository\org\apache\httpcomponents\core5\httpcore5\5.2.5\httpcore5-5.2.5.jar;C:\Users\ADMIN\.m2\repository\com\cloudinary\cloudinary-taglib\2.0.0\cloudinary-taglib-2.0.0.jar;C:\Users\ADMIN\.m2\repository\javax\servlet\jsp-api\2.0\jsp-api-2.0.jar;C:\Users\ADMIN\.m2\repository\javax\servlet\servlet-api\2.4\servlet-api-2.4.jar;C:\Users\ADMIN\.m2\repository\io\github\cdimascio\dotenv-java\2.2.4\dotenv-java-2.2.4.jar;C:\Users\ADMIN\.m2\repository\org\mindrot\jbcrypt\0.4\jbcrypt-0.4.jar;C:\Users\ADMIN\.m2\repository\io\jsonwebtoken\jjwt-api\0.11.5\jjwt-api-0.11.5.jar;C:\Users\ADMIN\.m2\repository\io\jsonwebtoken\jjwt-impl\0.11.5\jjwt-impl-0.11.5.jar;C:\Users\ADMIN\.m2\repository\io\jsonwebtoken\jjwt-jackson\0.11.5\jjwt-jackson-0.11.5.jar;C:\Users\ADMIN\.m2\repository\com\fasterxml\jackson\core\jackson-databind\2.12.6.1\jackson-databind-2.12.6.1.jar;C:\Users\ADMIN\.m2\repository\com\fasterxml\jackson\core\jackson-annotations\2.12.6\jackson-annotations-2.12.6.jar;C:\Users\ADMIN\.m2\repository\com\fasterxml\jackson\core\jackson-core\2.12.6\jackson-core-2.12.6.jar;C:\Users\ADMIN\.m2\repository\de\jensd\fontawesomefx-fontawesome\4.7.0-9.1.2\fontawesomefx-fontawesome-4.7.0-9.1.2.jar;C:\Users\ADMIN\.m2\repository\de\jensd\fontawesomefx-commons\9.1.2\fontawesomefx-commons-9.1.2.jar;C:\Users\ADMIN\.m2\repository\org\json\json\20230227\json-20230227.jar;C:\Users\ADMIN\.m2\repository\com\sun\mail\javax.mail\1.6.2\javax.mail-1.6.2.jar;C:\Users\ADMIN\.m2\repository\javax\activation\activation\1.1\activation-1.1.jar;"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="user.home" value="C:\Users\ADMIN"/>
    <property name="user.language" value="en"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="java.version.date" value="2024-10-15"/>
    <property name="java.home" value="C:\Program Files\Java\jdk-21"/>
    <property name="file.separator" value="\"/>
    <property name="basedir" value="D:\RMIT\PROJECTS\FURTHER\Build a Backend\further-programming-assignment-2-build-a-backend-FTECH\rental-management-system"/>
    <property name="java.vm.compressedOopsMode" value="Zero based"/>
    <property name="line.separator" value="&#10;"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="surefire.real.class.path" value="C:\Users\ADMIN\AppData\Local\Temp\surefire12732919086874730884\surefirebooter-20250108144838732_3.jar"/>
    <property name="user.script" value=""/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="java.runtime.version" value="21.0.5+9-LTS-239"/>
    <property name="user.name" value="ADMIN"/>
    <property name="stdout.encoding" value="Cp1258"/>
    <property name="path.separator" value=";"/>
    <property name="os.version" value="10.0"/>
    <property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/>
    <property name="file.encoding" value="UTF-8"/>
    <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/>
    <property name="localRepository" value="C:\Users\ADMIN\.m2\repository"/>
    <property name="java.vendor.url.bug" value="https://bugreport.java.com/bugreport/"/>
    <property name="java.io.tmpdir" value="C:\Users\ADMIN\AppData\Local\Temp\"/>
    <property name="java.version" value="21.0.5"/>
    <property name="user.dir" value="D:\RMIT\PROJECTS\FURTHER\Build a Backend\further-programming-assignment-2-build-a-backend-FTECH\rental-management-system"/>
    <property name="os.arch" value="amd64"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="sun.os.patch.level" value=""/>
    <property name="native.encoding" value="Cp1258"/>
    <property name="java.library.path" value="C:\Program Files\Java\jdk-21\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files\Java\jdk-21\bin;C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.4\bin;C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.4\libnvvp;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;C:\Program Files (x86)\NVIDIA Corporation\PhysX\Common;C:\Program Files\NVIDIA Corporation\NVIDIA NvDLISR;C:\Program Files\SQLiteStudio;C:\Users\ADMIN\AppData\Roaming\nvm;C:\Program Files\nodejs;C:\Program Files\Docker\Docker\resources\bin;C:\Program Files\Cloudflare\Cloudflare WARP\;C:\Program Files\NVIDIA Corporation\Nsight Compute 2024.1.0\;c:\Users\ADMIN\AppData\Local\Programs\cursor\resources\app\bin;C:\Program Files\Apache\apache-maven-3.9.9\bin;C:\Program Files\Git\cmd;C:\Users\ADMIN\scoop\shims;C:\Users\ADMIN\AppData\Local\Programs\Python\Python312\Scripts\;C:\Users\ADMIN\AppData\Local\Programs\Python\Python312\;C:\Users\ADMIN\AppData\Local\Programs\Python\Launcher\;C:\Program Files\JetBrains\IntelliJ IDEA 2024.2.4\bin;C:\Program Files\Java\jdk-21\bin;;C:\Program Files\JetBrains\PyCharm 2023.2.5\bin;;C:\Users\ADMIN\AppData\Local\Programs\Microsoft VS Code\bin;C:\Users\ADMIN\AppData\Roaming\npm;C:\Users\ADMIN\AppData\Roaming\nvm;C:\Program Files\nodejs;C:\MinGW\bin;;."/>
    <property name="java.vm.info" value="mixed mode, sharing"/>
    <property name="stderr.encoding" value="Cp1258"/>
    <property name="java.vendor" value="Oracle Corporation"/>
    <property name="java.vm.version" value="21.0.5+9-LTS-239"/>
    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
    <property name="java.class.version" value="65.0"/>
  </properties>
  <testcase name="testGeneratePropertyData" classname="com.yourcompany.rentalmanagement.data.DataGeneratorTest" time="10.513">
    <system-out><![CDATA[property data..
Hibernate SessionFactory initialized successfully
Hibernate: 
    /* SELECT
        COUNT(o) 
    FROM
        Owner o */ select
            count(o1_0.id) 
        from
            Owner o1_0
Hibernate: 
    /* insert for
        com.yourcompany.rentalmanagement.model.Owner */insert 
    into
        Owner (address_id, dob, email, password, phoneNumber, profileImage, role, salt, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Created owner: owner_john
Hibernate: 
    /* insert for
        com.yourcompany.rentalmanagement.model.Owner */insert 
    into
        Owner (address_id, dob, email, password, phoneNumber, profileImage, role, salt, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Created owner: owner_sarah
Hibernate: 
    /* insert for
        com.yourcompany.rentalmanagement.model.Owner */insert 
    into
        Owner (address_id, dob, email, password, phoneNumber, profileImage, role, salt, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Created owner: owner_mike
Created 3 owners with IDs: 1, 2, 3
Hibernate: 
    /* insert for
        com.yourcompany.rentalmanagement.model.Host */insert 
    into
        Host (address_id, dob, email, password, phoneNumber, profileImage, role, salt, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Created host: host_alice
Hibernate: 
    /* insert for
        com.yourcompany.rentalmanagement.model.Host */insert 
    into
        Host (address_id, dob, email, password, phoneNumber, profileImage, role, salt, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Created host: host_bob
Hibernate: 
    /* insert for
        com.yourcompany.rentalmanagement.model.Host */insert 
    into
        Host (address_id, dob, email, password, phoneNumber, profileImage, role, salt, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Created host: host_charlie
Hibernate: 
    /* insert for
        com.yourcompany.rentalmanagement.model.Host */insert 
    into
        Host (address_id, dob, email, password, phoneNumber, profileImage, role, salt, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Created host: host_david
Created 4 hosts with IDs: 1, 2, 3, 4

Creating Residential Properties...
Hibernate: 
    /* insert for
        com.yourcompany.rentalmanagement.model.Address */insert 
    into
        Address (city, number, state, street) 
    values
        (?, ?, ?, ?)
Hibernate: 
    /* insert for
        com.yourcompany.rentalmanagement.model.ResidentialProperty */insert 
    into
        Residential_Property (address_id, created_at, description, garden_availability, imageLink, last_updated, number_of_bedrooms, owner_id, pet_friendliness, price, rental_agreement_id, status, title) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    /* insert for
        com.yourcompany.rentalmanagement.model.Host.residentialProperties */insert 
    into
        Host_ResidentialProperty (host_id, residential_property_id) 
    values
        (?, ?)
Created residential property: Luxury Apartment with ID: 1
Hibernate: 
    /* insert for
        com.yourcompany.rentalmanagement.model.Address */insert 
    into
        Address (city, number, state, street) 
    values
        (?, ?, ?, ?)
Hibernate: 
    /* insert for
        com.yourcompany.rentalmanagement.model.ResidentialProperty */insert 
    into
        Residential_Property (address_id, created_at, description, garden_availability, imageLink, last_updated, number_of_bedrooms, owner_id, pet_friendliness, price, rental_agreement_id, status, title) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Created residential property: Family Home with ID: 2
Hibernate: 
    /* insert for
        com.yourcompany.rentalmanagement.model.Address */insert 
    into
        Address (city, number, state, street) 
    values
        (?, ?, ?, ?)
Hibernate: 
    /* insert for
        com.yourcompany.rentalmanagement.model.ResidentialProperty */insert 
    into
        Residential_Property (address_id, created_at, description, garden_availability, imageLink, last_updated, number_of_bedrooms, owner_id, pet_friendliness, price, rental_agreement_id, status, title) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    /* insert for
        com.yourcompany.rentalmanagement.model.Host.residentialProperties */insert 
    into
        Host_ResidentialProperty (host_id, residential_property_id) 
    values
        (?, ?)
Created residential property: Beach House with ID: 3
Hibernate: 
    /* insert for
        com.yourcompany.rentalmanagement.model.Address */insert 
    into
        Address (city, number, state, street) 
    values
        (?, ?, ?, ?)
Hibernate: 
    /* insert for
        com.yourcompany.rentalmanagement.model.ResidentialProperty */insert 
    into
        Residential_Property (address_id, created_at, description, garden_availability, imageLink, last_updated, number_of_bedrooms, owner_id, pet_friendliness, price, rental_agreement_id, status, title) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Created residential property: Mountain Cabin with ID: 4
Hibernate: 
    /* insert for
        com.yourcompany.rentalmanagement.model.Address */insert 
    into
        Address (city, number, state, street) 
    values
        (?, ?, ?, ?)
Hibernate: 
    /* insert for
        com.yourcompany.rentalmanagement.model.ResidentialProperty */insert 
    into
        Residential_Property (address_id, created_at, description, garden_availability, imageLink, last_updated, number_of_bedrooms, owner_id, pet_friendliness, price, rental_agreement_id, status, title) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Created residential property: City Condo with ID: 5
Hibernate: 
    /* insert for
        com.yourcompany.rentalmanagement.model.Address */insert 
    into
        Address (city, number, state, street) 
    values
        (?, ?, ?, ?)
Hibernate: 
    /* insert for
        com.yourcompany.rentalmanagement.model.ResidentialProperty */insert 
    into
        Residential_Property (address_id, created_at, description, garden_availability, imageLink, last_updated, number_of_bedrooms, owner_id, pet_friendliness, price, rental_agreement_id, status, title) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    /* insert for
        com.yourcompany.rentalmanagement.model.Host.residentialProperties */insert 
    into
        Host_ResidentialProperty (host_id, residential_property_id) 
    values
        (?, ?)
Created residential property: Suburban House with ID: 6
Hibernate: 
    /* insert for
        com.yourcompany.rentalmanagement.model.Address */insert 
    into
        Address (city, number, state, street) 
    values
        (?, ?, ?, ?)
Hibernate: 
    /* insert for
        com.yourcompany.rentalmanagement.model.ResidentialProperty */insert 
    into
        Residential_Property (address_id, created_at, description, garden_availability, imageLink, last_updated, number_of_bedrooms, owner_id, pet_friendliness, price, rental_agreement_id, status, title) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    /* one-shot delete for com.yourcompany.rentalmanagement.model.Host.residentialProperties */delete 
    from
        Host_ResidentialProperty 
    where
        host_id=?
Hibernate: 
    /* insert for
        com.yourcompany.rentalmanagement.model.Host.residentialProperties */insert 
    into
        Host_ResidentialProperty (host_id, residential_property_id) 
    values
        (?, ?)
Hibernate: 
    /* insert for
        com.yourcompany.rentalmanagement.model.Host.residentialProperties */insert 
    into
        Host_ResidentialProperty (host_id, residential_property_id) 
    values
        (?, ?)
Created residential property: Studio Apartment with ID: 7
Hibernate: 
    /* insert for
        com.yourcompany.rentalmanagement.model.Address */insert 
    into
        Address (city, number, state, street) 
    values
        (?, ?, ?, ?)
Hibernate: 
    /* insert for
        com.yourcompany.rentalmanagement.model.ResidentialProperty */insert 
    into
        Residential_Property (address_id, created_at, description, garden_availability, imageLink, last_updated, number_of_bedrooms, owner_id, pet_friendliness, price, rental_agreement_id, status, title) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    /* insert for
        com.yourcompany.rentalmanagement.model.Host.residentialProperties */insert 
    into
        Host_ResidentialProperty (host_id, residential_property_id) 
    values
        (?, ?)
Created residential property: Penthouse Suite with ID: 8
Hibernate: 
    /* insert for
        com.yourcompany.rentalmanagement.model.Address */insert 
    into
        Address (city, number, state, street) 
    values
        (?, ?, ?, ?)
Hibernate: 
    /* insert for
        com.yourcompany.rentalmanagement.model.ResidentialProperty */insert 
    into
        Residential_Property (address_id, created_at, description, garden_availability, imageLink, last_updated, number_of_bedrooms, owner_id, pet_friendliness, price, rental_agreement_id, status, title) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    /* one-shot delete for com.yourcompany.rentalmanagement.model.Host.residentialProperties */delete 
    from
        Host_ResidentialProperty 
    where
        host_id=?
Hibernate: 
    /* insert for
        com.yourcompany.rentalmanagement.model.Host.residentialProperties */insert 
    into
        Host_ResidentialProperty (host_id, residential_property_id) 
    values
        (?, ?)
Hibernate: 
    /* insert for
        com.yourcompany.rentalmanagement.model.Host.residentialProperties */insert 
    into
        Host_ResidentialProperty (host_id, residential_property_id) 
    values
        (?, ?)
Created residential property: Garden Villa with ID: 9
Hibernate: 
    /* insert for
        com.yourcompany.rentalmanagement.model.Address */insert 
    into
        Address (city, number, state, street) 
    values
        (?, ?, ?, ?)
Hibernate: 
    /* insert for
        com.yourcompany.rentalmanagement.model.ResidentialProperty */insert 
    into
        Residential_Property (address_id, created_at, description, garden_availability, imageLink, last_updated, number_of_bedrooms, owner_id, pet_friendliness, price, rental_agreement_id, status, title) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Created residential property: Townhouse with ID: 10

Creating Commercial Properties...
Hibernate: 
    /* insert for
        com.yourcompany.rentalmanagement.model.Address */insert 
    into
        Address (city, number, state, street) 
    values
        (?, ?, ?, ?)
Hibernate: 
    /* insert for
        com.yourcompany.rentalmanagement.model.CommercialProperty */insert 
    into
        Commercial_Property (address_id, business_type, created_at, description, imageLink, last_updated, owner_id, parking_space, price, rental_agreement_id, square_footage, status, title) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Created commercial property: Downtown Office with ID: 1
Hibernate: 
    /* insert for
        com.yourcompany.rentalmanagement.model.Address */insert 
    into
        Address (city, number, state, street) 
    values
        (?, ?, ?, ?)
Hibernate: 
    /* insert for
        com.yourcompany.rentalmanagement.model.CommercialProperty */insert 
    into
        Commercial_Property (address_id, business_type, created_at, description, imageLink, last_updated, owner_id, parking_space, price, rental_agreement_id, square_footage, status, title) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    /* insert for
        com.yourcompany.rentalmanagement.model.Host.commercialProperties */insert 
    into
        Host_CommercialProperty (host_id, commercial_property_id) 
    values
        (?, ?)
Created commercial property: Retail Space with ID: 2
Hibernate: 
    /* insert for
        com.yourcompany.rentalmanagement.model.Address */insert 
    into
        Address (city, number, state, street) 
    values
        (?, ?, ?, ?)
Hibernate: 
    /* insert for
        com.yourcompany.rentalmanagement.model.CommercialProperty */insert 
    into
        Commercial_Property (address_id, business_type, created_at, description, imageLink, last_updated, owner_id, parking_space, price, rental_agreement_id, square_footage, status, title) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    /* insert for
        com.yourcompany.rentalmanagement.model.Host.commercialProperties */insert 
    into
        Host_CommercialProperty (host_id, commercial_property_id) 
    values
        (?, ?)
Created commercial property: Restaurant Location with ID: 3
Hibernate: 
    /* insert for
        com.yourcompany.rentalmanagement.model.Address */insert 
    into
        Address (city, number, state, street) 
    values
        (?, ?, ?, ?)
Hibernate: 
    /* insert for
        com.yourcompany.rentalmanagement.model.CommercialProperty */insert 
    into
        Commercial_Property (address_id, business_type, created_at, description, imageLink, last_updated, owner_id, parking_space, price, rental_agreement_id, square_footage, status, title) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    /* insert for
        com.yourcompany.rentalmanagement.model.Host.commercialProperties */insert 
    into
        Host_CommercialProperty (host_id, commercial_property_id) 
    values
        (?, ?)
Created commercial property: Shopping Mall Unit with ID: 4
Hibernate: 
    /* insert for
        com.yourcompany.rentalmanagement.model.Address */insert 
    into
        Address (city, number, state, street) 
    values
        (?, ?, ?, ?)
Hibernate: 
    /* insert for
        com.yourcompany.rentalmanagement.model.CommercialProperty */insert 
    into
        Commercial_Property (address_id, business_type, created_at, description, imageLink, last_updated, owner_id, parking_space, price, rental_agreement_id, square_footage, status, title) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    /* one-shot delete for com.yourcompany.rentalmanagement.model.Host.commercialProperties */delete 
    from
        Host_CommercialProperty 
    where
        host_id=?
Hibernate: 
    /* insert for
        com.yourcompany.rentalmanagement.model.Host.commercialProperties */insert 
    into
        Host_CommercialProperty (host_id, commercial_property_id) 
    values
        (?, ?)
Hibernate: 
    /* insert for
        com.yourcompany.rentalmanagement.model.Host.commercialProperties */insert 
    into
        Host_CommercialProperty (host_id, commercial_property_id) 
    values
        (?, ?)
Created commercial property: Business Center with ID: 5
Hibernate: 
    /* insert for
        com.yourcompany.rentalmanagement.model.Address */insert 
    into
        Address (city, number, state, street) 
    values
        (?, ?, ?, ?)
Hibernate: 
    /* insert for
        com.yourcompany.rentalmanagement.model.CommercialProperty */insert 
    into
        Commercial_Property (address_id, business_type, created_at, description, imageLink, last_updated, owner_id, parking_space, price, rental_agreement_id, square_footage, status, title) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Created commercial property: Industrial Space with ID: 6
Hibernate: 
    /* insert for
        com.yourcompany.rentalmanagement.model.Address */insert 
    into
        Address (city, number, state, street) 
    values
        (?, ?, ?, ?)
Hibernate: 
    /* insert for
        com.yourcompany.rentalmanagement.model.CommercialProperty */insert 
    into
        Commercial_Property (address_id, business_type, created_at, description, imageLink, last_updated, owner_id, parking_space, price, rental_agreement_id, square_footage, status, title) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    /* one-shot delete for com.yourcompany.rentalmanagement.model.Host.commercialProperties */delete 
    from
        Host_CommercialProperty 
    where
        host_id=?
Hibernate: 
    /* insert for
        com.yourcompany.rentalmanagement.model.Host.commercialProperties */insert 
    into
        Host_CommercialProperty (host_id, commercial_property_id) 
    values
        (?, ?)
Hibernate: 
    /* insert for
        com.yourcompany.rentalmanagement.model.Host.commercialProperties */insert 
    into
        Host_CommercialProperty (host_id, commercial_property_id) 
    values
        (?, ?)
Created commercial property: Warehouse with ID: 7
Hibernate: 
    /* insert for
        com.yourcompany.rentalmanagement.model.Address */insert 
    into
        Address (city, number, state, street) 
    values
        (?, ?, ?, ?)
Hibernate: 
    /* insert for
        com.yourcompany.rentalmanagement.model.CommercialProperty */insert 
    into
        Commercial_Property (address_id, business_type, created_at, description, imageLink, last_updated, owner_id, parking_space, price, rental_agreement_id, square_footage, status, title) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    /* one-shot delete for com.yourcompany.rentalmanagement.model.Host.commercialProperties */delete 
    from
        Host_CommercialProperty 
    where
        host_id=?
Hibernate: 
    /* insert for
        com.yourcompany.rentalmanagement.model.Host.commercialProperties */insert 
    into
        Host_CommercialProperty (host_id, commercial_property_id) 
    values
        (?, ?)
Hibernate: 
    /* insert for
        com.yourcompany.rentalmanagement.model.Host.commercialProperties */insert 
    into
        Host_CommercialProperty (host_id, commercial_property_id) 
    values
        (?, ?)
Hibernate: 
    /* insert for
        com.yourcompany.rentalmanagement.model.Host.commercialProperties */insert 
    into
        Host_CommercialProperty (host_id, commercial_property_id) 
    values
        (?, ?)
Created commercial property: Medical Office with ID: 8
Hibernate: 
    /* insert for
        com.yourcompany.rentalmanagement.model.Address */insert 
    into
        Address (city, number, state, street) 
    values
        (?, ?, ?, ?)
Hibernate: 
    /* insert for
        com.yourcompany.rentalmanagement.model.CommercialProperty */insert 
    into
        Commercial_Property (address_id, business_type, created_at, description, imageLink, last_updated, owner_id, parking_space, price, rental_agreement_id, square_footage, status, title) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    /* one-shot delete for com.yourcompany.rentalmanagement.model.Host.commercialProperties */delete 
    from
        Host_CommercialProperty 
    where
        host_id=?
Hibernate: 
    /* insert for
        com.yourcompany.rentalmanagement.model.Host.commercialProperties */insert 
    into
        Host_CommercialProperty (host_id, commercial_property_id) 
    values
        (?, ?)
Hibernate: 
    /* insert for
        com.yourcompany.rentalmanagement.model.Host.commercialProperties */insert 
    into
        Host_CommercialProperty (host_id, commercial_property_id) 
    values
        (?, ?)
Created commercial property: Tech Hub with ID: 9
Hibernate: 
    /* insert for
        com.yourcompany.rentalmanagement.model.Address */insert 
    into
        Address (city, number, state, street) 
    values
        (?, ?, ?, ?)
Hibernate: 
    /* insert for
        com.yourcompany.rentalmanagement.model.CommercialProperty */insert 
    into
        Commercial_Property (address_id, business_type, created_at, description, imageLink, last_updated, owner_id, parking_space, price, rental_agreement_id, square_footage, status, title) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    /* one-shot delete for com.yourcompany.rentalmanagement.model.Host.commercialProperties */delete 
    from
        Host_CommercialProperty 
    where
        host_id=?
Hibernate: 
    /* insert for
        com.yourcompany.rentalmanagement.model.Host.commercialProperties */insert 
    into
        Host_CommercialProperty (host_id, commercial_property_id) 
    values
        (?, ?)
Hibernate: 
    /* insert for
        com.yourcompany.rentalmanagement.model.Host.commercialProperties */insert 
    into
        Host_CommercialProperty (host_id, commercial_property_id) 
    values
        (?, ?)
Hibernate: 
    /* insert for
        com.yourcompany.rentalmanagement.model.Host.commercialProperties */insert 
    into
        Host_CommercialProperty (host_id, commercial_property_id) 
    values
        (?, ?)
Created commercial property: Co-working Space with ID: 10
Hibernate: 
    /* SELECT
        COUNT(c) 
    FROM
        CommercialProperty c */ select
            count(cp1_0.id) 
        from
            Commercial_Property cp1_0
Total commercial properties created: 10
Transaction committed successfully
]]></system-out>
    <system-err><![CDATA[Jan 08, 2025 2:48:39 PM org.hibernate.Version logVersion
INFO: HHH000412: Hibernate ORM core version 6.6.3.Final
Jan 08, 2025 2:48:39 PM org.hibernate.cache.internal.RegionFactoryInitiator initiateService
INFO: HHH000026: Second-level cache disabled
Jan 08, 2025 2:48:39 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl configure
WARN: HHH10001002: Using built-in connection pool (not intended for production use)
Jan 08, 2025 2:48:40 PM org.hibernate.engine.jdbc.dialect.internal.DialectFactoryImpl constructDialect
WARN: HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
Jan 08, 2025 2:48:40 PM org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator initiateService
INFO: HHH10001005: Database info:
	Database JDBC URL [jdbc:postgresql://ep-curly-queen-a169votk.ap-southeast-1.aws.neon.tech/rental-management?sslmode=require]
	Database driver: org.postgresql.Driver
	Database version: 17.2
	Autocommit mode: false
	Isolation level: undefined/unknown
	Minimum pool size: 1
	Maximum pool size: 5
Jan 08, 2025 2:48:41 PM org.hibernate.resource.transaction.backend.jdbc.internal.DdlTransactionIsolatorNonJtaImpl getIsolatedConnection
INFO: HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@69c33ea2] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
Jan 08, 2025 2:48:49 PM org.hibernate.engine.internal.StatisticalLoggingSessionEventListener end
INFO: Session Metrics {
    31200 nanoseconds spent acquiring 1 JDBC connections;
    39100 nanoseconds spent releasing 1 JDBC connections;
    3780900 nanoseconds spent preparing 79 JDBC statements;
    3006274600 nanoseconds spent executing 79 JDBC statements;
    0 nanoseconds spent executing 0 JDBC batches;
    0 nanoseconds spent performing 0 L2C puts;
    0 nanoseconds spent performing 0 L2C hits;
    0 nanoseconds spent performing 0 L2C misses;
    1056324400 nanoseconds spent executing 21 flushes (flushing a total of 607 entities and 692 collections);
    702400 nanoseconds spent executing 2 pre-partial-flushes;
    302500 nanoseconds spent executing 2 partial-flushes (flushing a total of 47 entities and 47 collections)
}
Jan 08, 2025 2:48:49 PM org.hibernate.engine.internal.StatisticalLoggingSessionEventListener end
INFO: Session Metrics {
    0 nanoseconds spent acquiring 0 JDBC connections;
    0 nanoseconds spent releasing 0 JDBC connections;
    0 nanoseconds spent preparing 0 JDBC statements;
    0 nanoseconds spent executing 0 JDBC statements;
    0 nanoseconds spent executing 0 JDBC batches;
    0 nanoseconds spent performing 0 L2C puts;
    0 nanoseconds spent performing 0 L2C hits;
    0 nanoseconds spent performing 0 L2C misses;
    0 nanoseconds spent executing 0 flushes (flushing a total of 0 entities and 0 collections);
    0 nanoseconds spent executing 0 pre-partial-flushes;
    0 nanoseconds spent executing 0 partial-flushes (flushing a total of 0 entities and 0 collections)
}
]]></system-err>
  </testcase>
</testsuite>